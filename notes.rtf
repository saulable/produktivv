{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid1\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{decimal\}.}{\leveltext\leveltemplateid101\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\lin720 }{\listname ;}\listid2}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}}
\paperw11900\paperh16840\margl1440\margr1440\vieww21100\viewh11860\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 TO IMPLEMENT FULL LOGIN\
\'97\'97\'97\'97\'97\'97 \

\b0 Require persistent header\
\
We need to store login state to the redux store. \
\
\
\

\b DEV NOTES\
\'97\'97\'97 
\b0 \
\
First start index.js\
\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls1\ilvl0\cf0 {\listtext	1.	}Load up modules.\
{\listtext	2.	}Connect to MongoDb\
{\listtext	3.	}Connect up routes to the express server\
{\listtext	4.	}Check if in production.\
{\listtext	5.	}Listen on the port\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
3. auth.js does all the authentication work. book.js just handles the client side application and loads information. \
\
auth.js\
\pard\tx220\tx720\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\li720\fi-720\pardirnatural\partightenfactor0
\ls2\ilvl0\cf0 {\listtext	1.	}loads npm modules. \
{\listtext	2.	}passes a config file to passport\
{\listtext	3.	}connects up to the User shame from mongodb.\
{\listtext	4.	}gets the constant - secret for passing to the web token. \
{\listtext	5.	}handles the routes. \
{\listtext	6.	}\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
2. passport.js \
	sets up to use the app with JWT authentication. \
	\
Setting up your meal management App\
\
Goes to the callback_url -> this redirects to socialAuth.js, which sets the res.json as jwt token. \
\
\
\
\
\
\
\
\
\
\
What\'92s happening with Login local strategy. \
\'97\'97\'97\
1) Fire off onSubmit() with email and password\
2) Send off post request to /api/auth/login with creds.\
3) /api/auth/login checks for user. If user is found. A token is created, with secret settings. \
4) It returns with the token encrypting the entire user. \
5) Promise is resolved and the jwtToken is set in to local store.\
\
\
\
\
\
\
\
\
To Check that the user is authorised\
\'97\'97\'97\'97\'97\'97\'97\
1) We grab the token from localStorage.\
2) Pass this to the middleware jwt.\
3) The middleware looks in the database to find the id, with the corresponding decoded JWT. If it does it returns the user and logs in. \
\
1) Sign-up with facebook, set the email etc. \
2) We need to encrypt the whole user with our secret settings. \
\
1) Need to integrate JWT with facebook authorisation as well as other social logins\
	- Need to have the ability to connect other social accounts to the account.\
	- Ability to signup with any social accounts - this will be your base email address. \
		When setting up with social accounts you can\'92t set password to local. - done\
		\
2) Need to make authorised pages inaccessible unless having the jwtToken, doing so redirects to the login page. \
	- Quick check to see that the user is authorised, then return and update the state.\
3) Meal planning macro style\
	- Profile page\
	- Meals\
\
\
\
		\
\
}